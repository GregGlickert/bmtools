import click
import logging
import os
import questionary

from clint.textui import puts, colored, indent

from .util import load_config

@click.group('util')
@click.option('-c', '--config', type=click.Path(), default='./simulation_config.json', help='Configuration file to use, default: "simulation_config.json"')
@click.pass_context
def cli(ctx, config):
    config_path = os.path.abspath(os.path.expanduser(config)).replace("\\","/")

    ctx.obj["config"] = config_path

    if not os.path.exists(config_path):
        click.echo(colored.red("Config file not found: " + config))

def check_neuron_installed(confirm=True):
    try:
        import neuron
    except ModuleNotFoundError as e:
        print("Error: Python NEURON was not found.")
        if not confirm or not questionary.confirm("Do you want to continue anyway? ").ask():
            return False
    return True

@click.group('cell', help="Access various utilities for manipulating your cell")
@click.option('--hoc-folder', type=click.STRING, default=None, help="override the default cell picker from the simulation config hoc location")
@click.option('--mod-folder', type=click.STRING, default=None, help="override the default simulation config mod file location")
@click.option('--template', type=click.STRING, default=None, help="supply template name and skip interactive mode question")
@click.pass_context
def cell(ctx,hoc_folder,mod_folder,template):
  
    if not check_neuron_installed():
        return   

    if not hoc_folder or not mod_folder:
        cfg = load_config(ctx.obj['config'])
        if not hoc_folder:
            hoc_folder = cfg['components']['templates_dir']
        if not mod_folder:
            mod_folder = cfg['components']['mechanisms_dir']  

    ctx.obj["hoc_folder"] = hoc_folder
    ctx.obj["mod_folder"] = mod_folder
    ctx.obj["cell_template"] = template
       
    return

cli.add_command(cell)

@cell.command('tune', help="Creates a NEURON GUI window with everything you need to tune a cell")
@click.option('--easy', type=click.BOOL, default=None, is_flag=True, help="override the default simulation config mod file location")
@click.option('--write-hoc', type=click.STRING, default=None, help="write a standalone hoc file for your GUI, supply filename")
@click.option('--hide', type=click.BOOL, default=False, is_flag=True, help="hide the interface that shows automatically after building the GUI")
@click.option('--title',type=click.STRING,default=None)
@click.option('--tstop',type=click.INT,default=250)
@click.pass_context
def cell_tune(ctx,easy,write_hoc,hide,title,tstop):#, title, populations, group_by, save_file):
    
    from .neuron.celltuner import CellTunerGUI, PlotWidget, ControlMenuWidget, SecMenuWidget

    hoc_folder = ctx.obj["hoc_folder"]
    mod_folder = ctx.obj["mod_folder"]
    template = ctx.obj["cell_template"]

    ctg = CellTunerGUI(hoc_folder,mod_folder,title=title)
    hoc_templates = ctg.get_templates()
    
    # Cell selector
    if not template:
        template = questionary.select(
        "Select a cell:",
        choices=hoc_templates).ask()

    ctg.load_template(template)
    if not title:
        title = template + " - Cell Configurator - Interface generated by BMTools (https://github.com/tjbanks/bmtools)"

    # Mode selector
    if easy is None:
        easy = questionary.confirm("Use pre-built interface? (no for advanced mode) ").ask()
    
    if easy:
        #Window 1
        window_index = ctg.add_window(title=title)
        #Column 1
        column_index = ctg.add_column(window_index)
        plot_widget = PlotWidget(tstop=tstop)
        for sec in ctg.sections:
            sec_text = sec.hname().split('.')[-1]+"(.5)"
            plot_widget.add_expr(sec(0.5)._ref_v,sec_text)
        ctg.add_widget(window_index,column_index,plot_widget)
        
        #Column 2
        column_index = ctg.add_column(window_index)
        for sec in ctg.sections:
            #import pdb;pdb.set_trace()
            sec_menu_widget = SecMenuWidget(sec)
            ctg.add_widget(window_index,column_index,sec_menu_widget)

        #Column 3
        column_index = ctg.add_column(window_index)
        control_widget = ControlMenuWidget()
        ctg.add_widget(window_index,column_index,control_widget)
        iclamp_widget, iclamp = ctg.new_IClamp_Widget(ctg.sections[0](0.5),200,0.1,25)
        ctg.add_widget(window_index,column_index,iclamp_widget)

        
    else:
        pass

    # Section selector
    #section_names = ctg.get_section_names()

    #sections_selected = questionary.checkbox(
    #'Select sections you want to configure (each will recieve a window):',
    #choices=section_names).ask()

    # Display selector
    #displays_available = ['Voltages', 'Currents', 'Conductances', 'FIR']
    #inputs_available = ['Current Clamp', 'Spike Input']
    #configuration_available = ['Parameter']

    #Do you want to select which currents to plot?
    #import pdb;pdb.set_trace()
    if write_hoc:
        ctg.write_hoc(write_hoc)

    if not hide:
        ctg.show()

@cell.command('fir', help="Creates a NEURON GUI window with FI curve and passive properties")
#@click.option('--easy', type=click.BOOL, default=None, is_flag=True, help="override the default simulation config mod file location")
#@click.option('--write-hoc', type=click.STRING, default=None, help="write a standalone hoc file for your GUI, supply filename")
#@click.option('--hide', type=click.BOOL, default=False, is_flag=True, help="hide the interface that shows automatically after building the GUI")
@click.option('--title',type=click.STRING,default=None)
#@click.option('--tstop',type=click.INT,default=250)
@click.pass_context
def cell_fir(ctx,title):#, title, populations, group_by, save_file):
    
    from .neuron.celltuner import CellTunerGUI, TextWidget, PlotWidget, ControlMenuWidget, SecMenuWidget, FICurveWidget

    hoc_folder = ctx.obj["hoc_folder"]
    mod_folder = ctx.obj["mod_folder"]
    template = ctx.obj["cell_template"]

    ctg = CellTunerGUI(hoc_folder,mod_folder)
    hoc_templates = ctg.get_templates()
    
    # Cell selector
    if not template:
        template = questionary.select(
        "Select a cell:",
        choices=hoc_templates).ask()

    ctg.load_template(template)
    if not title:
        title = template + " - Cell FI Curve - Interface generated by BMTools (https://github.com/tjbanks/bmtools)"
        ctg.set_title(title)
    

    #Window 1
    window_index = ctg.add_window(title=title)
    #Column 1
    column_index = ctg.add_column(window_index)
    fir_widget = FICurveWidget(template)

    
    plot_widget = PlotWidget(tstop=ctg.tstop)
    for cell,amp in zip(fir_widget.cells, fir_widget.amps):
        plot_widget.add_expr(cell.soma[0](0.5)._ref_v,str(round(float(amp),2)))

    ctg.add_widget(window_index,column_index,fir_widget)
    ctg.add_widget(window_index,column_index,plot_widget)

    #Column 2
    column_index = ctg.add_column(window_index)
    control_widget = ControlMenuWidget()
    ctg.add_widget(window_index,column_index,control_widget)

    text_widget = TextWidget(label='PASSIVE PROPERTIES:\n')
    text_widget.add_text("V_rest: ")
    text_widget.add_text("R_in: ")
    text_widget.add_text("Tau: ")
    text_widget.add_text("")
    text_widget.add_text("")
    text_widget.add_text("FICurve spikes ([nA]:#): ")
    text_widget.add_text("")
    ctg.add_widget(window_index, column_index, text_widget)

    def set_text():
        text_widget.set_text(0,"V_rest: " + str(round(fir_widget.v_rest,2)))
        text_widget.set_text(1,"R_in: " + str(round(fir_widget.r_in,2)))
        text_widget.set_text(2,"Tau: " + str(round(fir_widget.tau,2)))
        spikes = [str(i) for i in fir_widget.plenvec]
        amps = fir_widget.amps
        text_widget.set_text(6," | ".join("["+str(round(a,2))+"]:"+n for a,n in zip(amps,spikes)))
        return

    #ctg.std_init()
    ctg.show(auto_run=True,on_complete=set_text)

if __name__ == "__main__":
    cli()